@inject SignInManager<IdentityUser> SignInManager
@using projetEsport.Authorization
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
    var userClaim = await SignInManager.UserManager.GetUserAsync(User);
    var displayAdmin = SignInManager.UserManager.IsInRoleAsync(userClaim, Constants.AdministrateursRole).Result;
}
<ul class="nav nav-pills flex-column">
    <li class="nav-item">
        <a class="nav-link @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index"><span class="icon-manage"></span>Profile</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email"><span class="icon-email"></span>Email</a>
    </li>
    <li class="nav-item">
        <a class="nav-link @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword"><span class="icon-password"></span>Password</a>
    </li>
    @if (User.IsInRole(Constants.AdministrateursRole))
    {
        <li class="nav-item">
            <a class="nav-link" id="admin" asp-area="Admin" asp-page="/Index"><span class="icon-admin"></span>Admin</a>
        </li>
    }
</ul>
